<?php

declare(strict_types=1);

namespace Zafkiel\Desktop;

use \Imagick;

class Background
{
    private string|array $_base;

    private array|null $_pictures;
    private string $_url;

    public function __construct(
        string|array $base,
        array|null $pictures = []
    ) {
        $this->_base     = $base;
        $this->_pictures = $pictures;
        $this->_url      = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['SERVER_NAME'];
    }

    public function getAllPictures(): Background
    {
        $this->_getPictures();

        return $this;
    }

    public function getUserPictures(
        string $frontendConf,
        string $adminName
    ): array {
        $userPictures = [];

        $pathToAdminsBackgrounds = 'img/admins/backgrounds/' . $adminName;

        foreach (glob($_SERVER['DOCUMENT_ROOT'] . $frontendConf . $pathToAdminsBackgrounds . '/*.{jpg,jpeg,png,gif,webp}', GLOB_BRACE) as $pictureName) {

            //  A slash is added at the beggining as it won't be added in _getHTTPPath()
            $relPath = '/' . $frontendConf . $pathToAdminsBackgrounds;

            $userPictures[] = $this->_buildData($this->_getHTTPPath($pictureName, $relPath));
        }


        return $userPictures;
    }

    public function setPictures(array $pictures): Background
    {
        $this->_pictures = $pictures;

        return $this;
    }

    public function getDefaultPictures(): array
    {
        $pictures = glob(__DIR__ . '/../Templates/img/backgrounds/pictures/*.{jpg,jpeg}', GLOB_BRACE);
        $paths    = [];

        foreach ($pictures as $picture) {
            $paths[] = realpath($picture);
        }

        return $this->getPicturesData($paths);
    }

    public function getPicturesData($pictures): array
    {
        $picturesWithData = [];

        for ($i = 0; $i < count($pictures); $i++) {
            if (in_array(pathinfo($pictures[$i], PATHINFO_EXTENSION), ['jpg', 'png', 'gif', 'jpeg'])) {

                $currentFilename = pathinfo($pictures[$i])['filename'];

                if (file_exists(__DIR__ . '/../Templates/img/backgrounds/facts/data_' . $currentFilename . '.json')) {

                    $pictureData = json_decode(
                        file_get_contents(
                            __DIR__ . '/../Templates/img/backgrounds/facts/data_' .
                                $currentFilename . '.json'
                        ),
                        true
                    );
                } else {
                    $pictureData = [];
                }

                $pictureUrl = (preg_match('/^http/i', $pictures[$i]) === 0) ? $this->_getHTTPPath($pictures[$i]) : $pictures[$i];

                $picturesWithData[$i] = $this->_buildData($pictureUrl, $pictureData);
            }
        }

        return $picturesWithData;
    }

    private function _getHTTPPath(
        string $picturePath,
        string $pathToBackgrounds = ""
    ) {
        return (empty($pathToBackgrounds)) ? $this->_url . '/vendor/zafkiel/core/src/Templates/img/backgrounds/pictures/' . basename($picturePath) : $this->_url . $pathToBackgrounds . '/' . basename($picturePath);
    }

    private function _buildData(
        string $picture,
        array $pictureData = []
    ) {
        $structuredPictures = [];

        $structuredPictures = array(
            'path'     => (preg_match('/^http/i', $picture)) ? urldecode($picture) : $this->_url . '/' . urldecode($picture),
            'filename' => urldecode(basename($picture)),
            'picture'  => $this->reducePictureCompression($picture),
            'data'     => $pictureData
        );

        return $structuredPictures;
    }

    private function reducePictureCompression(string $picture): string
    {
        /*
        Paths are composed of url
        That's why it is necessary to recreate the absolute path.
        The substr() method removes the additionnal slash generated by parse_url()
        */
        $pathToPicture = (preg_match('/^http/i', $picture)) ? $_SERVER['DOCUMENT_ROOT'] . substr(parse_url($picture, PHP_URL_PATH), 1, strlen($picture)) : $picture;

        $imagick = new Imagick($pathToPicture);
        $imagick->thumbnailImage(300, 200, true);


        /*
        The Imagick object can't be displayed with Twig.
        Better to store it in base64 encoding.
        */
        $base64 = base64_encode($imagick->getImageBlob());

        return $base64;
    }

    private function _getPictures(): Background
    {
        $pictures = [];
        $http = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") ? 'https://' : 'http://';

        die(var_dump($this->_base['frontend_components']));
        $pictures = scandir('');

        foreach (glob($this->_base . '/pictures/*.jpg') as $pictureName) {
            $pictures[] = $http . $_SERVER['SERVER_NAME'] . '/vendor/zafkiel/core/src/Templates/img/backgrounds/pictures/' . basename($pictureName);
        }

        $this->_pictures = $pictures;

        return $this;
    }
}
